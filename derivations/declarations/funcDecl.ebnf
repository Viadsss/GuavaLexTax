# EXAMPLE: void greet() { print("hi"); }

# LEFTMOST DERIVATION
<funcDecl> ::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) <block>
::= void <IDENTIFIER> ( [<parameters>] )” <block>
::= void <ALPHA> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void <LETTER> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void <LOWER_LETTER> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void g ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void g <ALPHA> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void g <LETTER> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void g <LOWER_LETTER> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void gr ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void gr <ALPHA> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void gr <LETTER> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void gr <LOWER_LETTER> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void gre ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void gre <ALPHA> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void gre <LETTER> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void gre <LOWER_LETTER> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void gree ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void gree <ALPHA> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void gree <LETTER> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void gree <LOWER_LETTER> ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void greet ( <ALPHA> | <DIGIT> )* ( [<parameters>] )” <block>
::= void greet ( [<parameters>] )” <block>
::= void greet () <block>
::= void greet () { <declaration>* }
::= void greet () { <statement> <declaration>* }
::= void greet () { <printStmt> <declaration>* }
::= void greet () { print ([<arguments>] ); <declaration>* }
::= void greet () { print (<expression> ( , <expression> )* ); <declaration>* }
::= void greet () { print (<assignment> ( , <expression> )* ); <declaration>* }
::= void greet () { print (<logic_or> ( , <expression> )* ); <declaration>* }
::= void greet () { print (<logic_and> ( , <expression> )* ); <declaration>* }
::= void greet () { print (<equality> ( , <expression> )* ); <declaration>* }
::= void greet () { print (<comparison> ( , <expression> )* ); <declaration>* }
::= void greet () { print (<term> ( , <expression> )* ); <declaration>* }
::= void greet () { print (<factor> ( , <expression> )* ); <declaration>* }
::= void greet () { print (<unary> ( , <expression> )* ); <declaration>* }
::= void greet () { print (<postfix> ( , <expression> )* ); <declaration>* }
::= void greet () { print (<primary> ( , <expression> )* ); <declaration>* }
::= void greet () { print (<STRING> ( , <expression> )* ); <declaration>* }
::= void greet () { print ("<CHAR_CONTENT>*" ( , <expression> )* ); <declaration>* }
::= void greet () { print ("<REGULAR_CHAR> <CHAR_CONTENT>*" ( , <expression> )* ); <declaration>* }
::= void greet () { print ("<LETTER> <CHAR_CONTENT>*" ( , <expression> )* ); <declaration>* }
::= void greet () { print ("<LOWER_LETTER> <CHAR_CONTENT>*" ( , <expression> )* ); <declaration>* }
::= void greet () { print ("h <CHAR_CONTENT>*" ( , <expression> )* ); <declaration>* }
::= void greet () { print ("h <REGULAR_CHAR> <CHAR_CONTENT>*" ( , <expression> )* ); <declaration>* }
::= void greet () { print ("h <LETTER> <CHAR_CONTENT>*" ( , <expression> )* ); <declaration>* }
::= void greet () { print ("h <LOWER_LETTER> <CHAR_CONTENT>*" ( , <expression> )* ); <declaration>* }
::= void greet () { print ("hi <CHAR_CONTENT>*" ( , <expression> )* ); <declaration>* }
::= void greet () { print ("hi" ( , <expression> )* ); <declaration>* }
::= void greet () { print ("hi"); <declaration>* }
::= void greet () { print ("hi"); }

# RIGHTMOST DERIVATION
<funcDecl> ::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) <block>
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { <declaration>* }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { <statement> <declaration>* }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { <statement> }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { <printStmt> }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( [<arguments>] ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <expression> ( , <expression> )* ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <expression> ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <assignment> ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <logic_and> ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <logic_or> ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <logic_and> ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <equality> ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <comparison> ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <factor> ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <unary> ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <postfix> ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <call> ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <primary> ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( <STRING> ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( "<CHAR_CONTENT>*" ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( "<REGULAR_CHAR> <REGULAR_CHAR> <CHAR_CONTENT>*" ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( "<REGULAR_CHAR> <REGULAR_CHAR> <CHAR_CONTENT>*" ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( "<REGULAR_CHAR> i" ); }
::= [<modifier>] <returnType> <IDENTIFIER> ( [<parameters>] ) { print ( "hi" ); }
::= [<modifier>] <returnType> <IDENTIFIER> () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> (<ALPHA> | <DIGIT>)* () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> (<ALPHA> | <DIGIT>)* () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> <ALPHA> (<ALPHA> | <DIGIT>)* () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> <ALPHA> <ALPHA> (<ALPHA> | <DIGIT>)* () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> <ALPHA> <ALPHA> <ALPHA> (<ALPHA> | <DIGIT>)* () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> <ALPHA> <ALPHA> <ALPHA> () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> <ALPHA> <ALPHA> <LETTER> () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> <ALPHA> <ALPHA> <LOWER_LETTER> () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> <ALPHA> <ALPHA> t () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> <ALPHA> <LETTER> t () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> <ALPHA> <LOWER_LETTER> t () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> <ALPHA> et () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> <LETTER> et () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> <LOWER_LETTER> et () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <ALPHA> eet () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <LETTER> eet () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> <LOWER_LETTER> eet () { print ( "hi" ); }
::= [<modifier>] <returnType> <ALPHA> reet () { print ( "hi" ); }
::= [<modifier>] <returnType> <LETTER> reet () { print ( "hi" ); }
::= [<modifier>] <returnType> <LOWER_LETTER> reet () { print ( "hi" ); }
::= [<modifier>] <returnType> greet () { print ( "hi" ); }
::= [<modifier>] void greet () { print ( "hi" ); }
::= void greet () { print ( "hi" ); }