/* Comp:
Example Code: 
Comp btn -> Comp.button("button1"){
   add(btnStyle);
   add(btnEvent);
};
*/

# Leftmost Derivation:

<nativeDecl> ::= [<modifier>] <nativeClassType> <IDENTIFIER> [-> <expression>] ;
::= Comp <IDENTIFIER> [-> <expression>] ;
::= Comp <ALPHA> ( <ALPHA> | <DIGIT> )* [-> <expression>] ;
::= Comp <ALPHA> ( <ALPHA> | <DIGIT> )* [-> <expression>] ;
::= Comp <LETTER> ( <ALPHA> | <DIGIT> )* [-> <expression>] ;
::= Comp <LOWER_LETTER> ( <ALPHA> | <DIGIT> )* [-> <expression>] ;
::= Comp b ( <ALPHA> | <DIGIT> )* [-> <expression>] ;
::= Comp b <ALPHA> ( <ALPHA> | <DIGIT> )* [-> <expression>] ;
::= Comp b  <LETTER> ( <ALPHA> | <DIGIT> )* [-> <expression>]  ;
::= Comp b  <LOWER_LETTER> ( <ALPHA> | <DIGIT> )* [-> <expression>] ;
::= Comp bt ( <ALPHA> | <DIGIT> )* [-> <expression>] ;
::= Comp bt <ALPHA> ( <ALPHA> | <DIGIT> )* [-> <expression>] ;
::= Comp bt  <LETTER> ( <ALPHA> | <DIGIT> )* [-> <expression>]  ;
::= Comp bt  <LOWER_LETTER> ( <ALPHA> | <DIGIT> )* [-> <expression>]  ;
::= Comp btn ( <ALPHA> | <DIGIT> )* [-> <expression>] ;
::= Comp btn [-> <expression>] ;
::= Comp btn -> <expression> ;
::= Comp btn -> <assignment> ;
::= Comp btn -> <logic_or> ;
::= Comp btn -> <logic_and> ;
::= Comp btn -> <equality> ;
::= Comp btn -> <comparison> ;
::= Comp btn -> <term> ;
::= Comp btn -> <factor> ;
::= Comp btn -> <unary> ;
::= Comp btn -> <postfix> ;
::= Comp btn -> <call> ;
::= Comp btn -> <primary> ;
::= Comp btn -> <nativeClass> ;
::= Comp btn -> <Comp> ;
::= Comp btn -> Comp . <compType> ( [<arguments>] ) [<compBlock>] ;
::= Comp btn -> Comp . button ( [<arguments>] ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "(<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( " <REGULAR_CHAR> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( " <LETTER> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( " <LOWER_LETTER> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "b (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "b <REGULAR_CHAR> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "b <LETTER> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "b <LOWER_LETTER> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "bu (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "bu <REGULAR_CHAR> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "bu <LETTER> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "bu <LOWER_LETTER> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "but (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "but <REGULAR_CHAR> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "but <LETTER> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "but <LOWER_LETTER> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "butt (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "butt <REGULAR_CHAR> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "butt <LETTER> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "butt <LOWER_LETTER> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "butto (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "butto <REGULAR_CHAR> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "butto <LETTER> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "butto <LOWER_LETTER> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "button <REGULAR_CHAR> (<CHAR_CONTENT>)* " ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "button <DIGIT> (<CHAR_CONTENT>)*" ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "button1 (<CHAR_CONTENT>)*" ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "button1" ) [<compBlock>] ;
::= Comp btn -> Comp . button ( "button1" ) { ( <declaration> | <compCall> )* } ;
::= Comp btn -> Comp . button ( "button1" ) { <compCall> <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { <addMethod> <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <expression> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <assignment> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <logic_or> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <logic_and> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <equality> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <comparison> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <term> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <factor> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <unary> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <postfix> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <call> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <primary> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <IDENTIFIER> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; <addMethod> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( <expression> ) } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( <assignment> ) } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( <logic_or> ) } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( <logic_and> ) } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( <equality> ) } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( <comparison> ) } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( <term> ) } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( <factor> ) } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( <unary> ) } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( <postfix> ) } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( <call> ) } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( <primary> ) } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( <IDENTIFIER> ) <compCall> } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( btnEvent ) } ;
::= Comp btn -> Comp . button ( "button1" ) { add ( btnStyle ) ; add ( btnEvent ) ; } ;


# Rightmost Derivation:
<nativeDecl> ::= [<modifier>] <nativeClassType> <IDENTIFIER> [-> <expression>] ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> [-> <expression>] ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <expression> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <assignment> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <logic_or> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <logic_and> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <equality> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <comparison> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <term> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <factor> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <unary> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <postfix> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <call> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <primary> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <nativeClass> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> <Comp> ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) [<compBlock>] ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <declaration> | <compCall> )* } ;

::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> <compCall> } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> <addMethod> } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( <expression> ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( <assignment> ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( <logic_or> ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( <logic_and> ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( <equality> ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( <comparison> ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( <term> ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( <factor> ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( <unary> ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( <postfix> ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( <call> ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( <primary> ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( <IDENTIFIER> ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( btnEvent ) } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <compCall> add ( btnEvent ) ; } ;

::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { <addMethod> add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <expression> ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <assignment> ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <logic_or> ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <logic_and> ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <equality> ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <comparison> ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <term> ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <factor> ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <unary> ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <postfix> ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <call> ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <primary> ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( <IDENTIFIER> ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( [<arguments>] ) { ( btnEStyle ) add ( btnEvent ) ; } ;

::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "(<CHAR_CONTENT>)* " ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> (<CHAR_CONTENT>)* " ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> (<CHAR_CONTENT>)* " ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> (<CHAR_CONTENT>)* " ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> (<CHAR_CONTENT>)* " ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> (<CHAR_CONTENT>)* " ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> (<CHAR_CONTENT>)* " ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR>" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <DIGIT>" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> 1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <LETTER> 1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <LOWER_LETTER> 1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> n1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <LETTER> n1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <LOWER_LETTER> n1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> on1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <LETTER> on1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> <LOWER_LETTER> on1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <REGULAR_CHAR> ton1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <LETTER> ton1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> <LOWER_LETTER> ton1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <REGULAR_CHAR> tton1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <LETTER> tton1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> <LOWER_LETTER> tton1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<REGULAR_CHAR> utton1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<LETTER> utton1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "<LOWER_LETTER> utton1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . <compType> ( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;

::= [<modifier>] <nativeClassType> <IDENTIFIER> -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> ( <ALPHA> | <DIGIT> )* -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <ALPHA> ( <ALPHA> | <DIGIT> )* -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <ALPHA> <ALPHA> ( <ALPHA> | <DIGIT> )* -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <ALPHA> <ALPHA> <ALPHA> -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <ALPHA> <ALPHA> <LETTER> -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <ALPHA> <ALPHA> <LOWER_LETTER> -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <ALPHA> <ALPHA> n -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <ALPHA> <LETTER> n -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <ALPHA> <LOWER_LETTER> n -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <ALPHA> tn -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <LETTER> tn -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> <LOWER_LETTER> tn -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= [<modifier>] <nativeClassType> btn -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;

::= [<modifier>] Comp btn -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;
::= Comp btn -> Comp . button( "button1" ) { ( btnEStyle ) add ( btnEvent ) ; } ;