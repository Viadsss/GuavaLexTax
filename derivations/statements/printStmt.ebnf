# Example: print("a");

# LEFTMOST DERIVATION
<printStmt> ::= print( [<arguments>] ) ;
::= print(<expression> ( , <expression> )* ) ;
::= print(<assignment> ( , <expression> )* ) ;
::= print(<logic_or> ( , <expression> )* ) ;
::= print(<logic_and> ( || <logic_and> )* ( , <expression> )* ) ;
::= print(<equality> ( && <equality> )* ( || <logic_and> )* ) ;
::= print(<comparison> (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print(<term> ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print(<factor> ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print(<unary> ( ( / | * | % ) <unary> )* ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print(<postfix> ( ( / | * | % ) <unary> )* ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print(<call> [++ | -- ] ( ( / | * | % ) <unary> )* ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print(<primary> ( ( [<arguments>] ) | . <IDENTIFIER> )* [++ | -- ] ( ( / | * | % ) <unary> )* ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print(<STRING> ( ( [<arguments>] ) | . <IDENTIFIER> )* [++ | -- ] ( ( / | * | % ) <unary> )* ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print("<CHAR_CONTENT>*" ( ( [<arguments>] ) | . <IDENTIFIER> )* [++ | -- ] ( ( / | * | % ) <unary> )* ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print("<REGULAR_CHAR> <CHAR_CONTENT>*" ( ( [<arguments>] ) | . <IDENTIFIER> )* [++ | -- ] ( ( / | * | % ) <unary> )* ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print("<LETTER> <CHAR_CONTENT>*" ( ( [<arguments>] ) | . <IDENTIFIER> )* [++ | -- ] ( ( / | * | % ) <unary> )* ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print("<LOWER_LETTER> <CHAR_CONTENT>*" ( ( [<arguments>] ) | . <IDENTIFIER> )* [++ | -- ] ( ( / | * | % ) <unary> )* ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print("a <CHAR_CONTENT>*" ( ( [<arguments>] ) | . <IDENTIFIER> )* [++ | -- ] ( ( / | * | % ) <unary> )* ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print("a" ( ( [<arguments>] ) | . <IDENTIFIER> )* [++ | -- ] ( ( / | * | % ) <unary> )* ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print("a" [++ | -- ] ( ( / | * | % ) <unary> )* ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print("a" ( ( / | * | % ) <unary> )* ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print("a" ( (- | + ) <factor> )* ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print("a" ( ( > | >= | < | <= ) <term> )* (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print("a" (( != | == ) <comparison> )* ( && <equality> )* ( || <logic_and> )* ) ;
::= print("a" ( && <equality> )* ( || <logic_and> )* ) ;
::= print("a" ( || <logic_and> )* );
::= print("a");

# RIGHTMOST DERIVATION
<printStmt> ::= print( [<arguments>] ) ;
::= print(<expression> ( , <expression> )* ) ;
::= print(<expression>) ;
::= print(<assignment>) ;
::= print(<logic_or>) ;
::= print(<logic_and> ( || <logic_and> )*) ;
::= print(<logic_and>) ;
::= print(<equality> ( && <equality> )*) ;
::= print(<equality>) ;
::= print(<comparison> (( != | == ) <comparison> )*) ;
::= print(<comparison>) ;
::= print(<term> ( ( > | >= | < | <= ) <term> )*) ;
::= print(<term>) ;
::= print(<factor> ( (- | + ) <factor> )*) ;
::= print(<factor>) ;
::= print(<unary>) ;
::= print(<postfix>) ;
::= print(<call> [++ | -- ]) ;
::= print(<call>) ;
::= print(<primary> ( ( [<arguments>] ) | . <IDENTIFIER> )*) ;
::= print(<primary>) ;
::= print(<STRING>) ;
::= print("<CHAR_CONTENT>* ") ;
::= print("<REGULAR_CHAR> <CHAR_CONTENT>* ") ;
::= print("<REGULAR_CHAR>") ;
::= print("<LETTER>") ;
::= print("<LOWER_LETTER>") ;
::= print("a");