# Left Most Derivation

<doWhileStmt> ::= do <statement> while ( <expression> ) ;
::= do <block> while ( <expression> ) ;
::= do <declaration>* while ( <expression> ) ;
::= do <statement> <declaration>* while ( <expression> ) ;
::= do <printStmt> <declaration>* while ( <expression> ) ;
::= do print ( [ <arguments> ] ); <declaration>* while ( <expression> ) ;
::= do print ( <expression> ); <declaration>* while ( <expression> ) ;
::= do print ( <assignments> ); <declaration>* while ( <expression> ) ;
::= do print ( <logic_or> ); <declaration>* while ( <expression> ) ;
::= do print ( <logic_and> ); <declaration>* while ( <expression> ) ;
::= do print ( <equality> ); <declaration>* while ( <expression> ) ;
::= do print ( <comparison> ); <declaration>* while ( <expression> ) ;
::= do print ( <term> ); <declaration>* while ( <expression> ) ;
::= do print ( <factor> ); <declaration>* while ( <expression> ) ;
::= do print ( <unary> ); <declaration>* while ( <expression> ) ;
::= do print ( <postfix> ); <declaration>* while ( <expression> ) ;
::= do print ( <call> ); <declaration>* while ( <expression> ) ;
::= do print ( <primary> ); <declaration>* while ( <expression> ) ;
::= do print ( <IDENTIFIER> ); <declaration>* while ( <expression> ) ;
::= do print ( <ALPHA> ); <declaration>* while ( <expression> ) ;
::= do print ( <LETTER> ); <declaration>* while ( <expression> ) ;
::= do print ( <LOW_LETTER> ); <declaration>* while ( <expression> ) ;
::= do print ( i ); <declaration>* while ( <expression> ) ;
::= do print ( i ); <statement> while ( <expression> ) ;
::= do print ( i ); <exprStmt> while ( <expression> ) ;
::= do print ( i ); <expression> while ( <expression> ) ;
::= do print ( i ); <assignment> while ( <expression> ) ;
::= do print ( i ); <logic_or> while ( <expression> ) ;
::= do print ( i ); <logic_and> while ( <expression> ) ;
::= do print ( i ); <equality> while ( <expression> ) ;
::= do print ( i ); <comparison> while ( <expression> ) ;
::= do print ( i ); <term> while ( <expression> ) ;
::= do print ( i ); <factor> while ( <expression> ) ;
::= do print ( i ); <unary> while ( <expression> ) ;
::= do print ( i ); <postfix> while ( <expression> ) ;
::= do print ( i ); <call> [ ++ | - - ] while ( <expression> ) ;
::= do print ( i ); <primary> [ ++ | - - ] while ( <expression> ) ;
::= do print ( i ); <IDENTIFIER> [ ++ | - - ] while ( <expression> ) ;
::= do print ( i ); <ALPHA> [ ++ | - - ] while ( <expression> ) ;
::= do print ( i ); <LETTER> [ ++ | - - ] while ( <expression> ) ;
::= do print ( i ); <LOW_LETTER> [ ++ | - - ] while ( <expression> ) ;
::= do print ( i ); i [ ++ | - - ] while ( <expression> ) ;
::= do print ( i ); i ++ while ( <expression> ) ;
::= do print ( i ); i ++ while ( <assignment> ) ;
::= do print ( i ); i ++ while ( <logic_or> ) ;
::= do print ( i ); i ++ while ( <logic_and> ) ;
::= do print ( i ); i ++ while ( <equality> ) ;
::= do print ( i ); i ++ while ( <comparison> ) ;
::= do print ( i ); i ++ while ( <term>  ( ( > | >= | < | <= ) <term> )* ) ;
::= do print ( i ); i ++ while ( <factor>  ( ( > | >= | < | <= ) <term> )* ) ;
::= do print ( i ); i ++ while ( <unary>  ( ( > | >= | < | <= ) <term> )* ) ;
::= do print ( i ); i ++ while ( <postfix>  ( ( > | >= | < | <= ) <term> )* ) ;
::= do print ( i ); i ++ while ( <call>  ( ( > | >= | < | <= ) <term> )* ) ;
::= do print ( i ); i ++ while ( <primary>  ( ( > | >= | < | <= ) <term> )* ) ;
::= do print ( i ); i ++ while ( <IDENTIFIER>  ( ( > | >= | < | <= ) <term> )* ) ;
::= do print ( i ); i ++ while ( <ALPHA>  ( ( > | >= | < | <= ) <term> )* ) ;
::= do print ( i ); i ++ while ( <LETTER>  ( ( > | >= | < | <= ) <term> )* ) ;
::= do print ( i ); i ++ while ( <LOW_LETTER>  ( ( > | >= | < | <= ) <term> )* ) ;
::= do print ( i ); i ++ while ( i  ( ( > | >= | < | <= ) <term> )* ) ;
::= do print ( i ); i ++ while ( i  <= <term> ) ;
::= do print ( i ); i ++ while ( i  <= <factor> ) ;
::= do print ( i ); i ++ while ( i  <= <unary> ) ;
::= do print ( i ); i ++ while ( i  <= <postfix> ) ;
::= do print ( i ); i ++ while ( i  <= <call> ) ;
::= do print ( i ); i ++ while ( i  <= <primary> ) ;
::= do print ( i ); i ++ while ( i  <= <INTEGER> ) ;
::= do print ( i ); i ++ while ( i  <= 5 ) ;


# Right Most Derivation

<doWhileStmt> ::= do <statement> while ( <expression> ) ;
<doWhileStmt> ::= do <statement> while ( <assignment> ) ;
<doWhileStmt> ::= do <statement> while ( <logic_or> ) ;
<doWhileStmt> ::= do <statement> while ( <logic_and> ) ;
<doWhileStmt> ::= do <statement> while ( <equality> ) ;
<doWhileStmt> ::= do <statement> while ( <comparison> ) ;
<doWhileStmt> ::= do <statement> while (  <term>  ( ( > | >= | < | <= ) <term> )* ) ;
<doWhileStmt> ::= do <statement> while (  <term>  ( > | >= | < | <= ) <factor> ) ;
<doWhileStmt> ::= do <statement> while (  <term>  ( > | >= | < | <= ) <unary> ) ;
<doWhileStmt> ::= do <statement> while (  <term>  ( > | >= | < | <= ) <postfix> ) ;
<doWhileStmt> ::= do <statement> while (  <term>  ( > | >= | < | <= ) <call> ) ;
<doWhileStmt> ::= do <statement> while (  <term>  ( > | >= | < | <= ) <primary> ) ;
<doWhileStmt> ::= do <statement> while (  <term>  ( > | >= | < | <= ) <INTEGER> ) ;
<doWhileStmt> ::= do <statement> while (  <term>  ( > | >= | < | <= ) 5 ) ;
<doWhileStmt> ::= do <statement> while (  <term> <= 5 ) ;
<doWhileStmt> ::= do <statement> while (  <factor> <= 5 ) ;
<doWhileStmt> ::= do <statement> while (  <unary> <= 5 ) ;
<doWhileStmt> ::= do <statement> while (  <postfix> <= 5 ) ;
<doWhileStmt> ::= do <statement> while (  <call> <= 5 ) ;
<doWhileStmt> ::= do <statement> while (  <primary> <= 5 ) ;
<doWhileStmt> ::= do <statement> while (  <IDENTIFIER> <= 5 ) ;
<doWhileStmt> ::= do <statement> while (  <ALPHA> <= 5 ) ;
<doWhileStmt> ::= do <statement> while (  <LETTER> <= 5 ) ;
<doWhileStmt> ::= do <statement> while (  <LOWER_LETTER> <= 5 ) ;
<doWhileStmt> ::= do <statement> while (  i <= 5 ) ;
<doWhileStmt> ::= do <block> while (  i <= 5 ) ;
<doWhileStmt> ::= do <declaration>* while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <declaration>* while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <statement> while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <exprStmt> while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <expression>; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <assignment>; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <logic_or>; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <logic_and>; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <equality>; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <comparison>; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <term>; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <factor>; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <unary>; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <postfix>; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <call> [ ++ | - - ]; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <call> ++; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <primary> ++; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <IDENTIFIER> ++; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <ALPHA> ++; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <LETTER> ++; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> <LOWER_LETTER> ++; while (  i <= 5 ) ;
<doWhileStmt> ::= do <statement> i ++ ; while  (  i <= 5 ) ;
<doWhileStmt> ::= do <printStmt> i ++ ; while  (  i <= 5 ) ;
<doWhileStmt> ::= do print ( [ <arguments> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <expression> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <assignment> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <logic_or> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <logic_and> ) ; i ++;  while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <equality> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <comparison> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <term> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <factor> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <unary> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <postfix> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <call> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <primary> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <IDENTIFIER> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <ALPHA> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <LETTER> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( <LOW_LETTER> ) ; i ++ ; while (  i <= 5 ) ;
<doWhileStmt> ::= do print ( i ) ; i ++ ; while (  i <= 5 ) ;
