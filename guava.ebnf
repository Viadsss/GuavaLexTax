<program> ::= <declaration>* "EOF"

<declaration> ::= <funcDecl>
				| <varDecl>
                | <statement>

<funcDecl> ::= "func" <function> 
<varDecl> ::=  "var" ("expose")? <IDENTIFIER> ( "=" <expression> )? ";"

<statement> ::= <exprStmt> | <forStmt> | <whileStmt> | <doWhileStmt> | <ifStmt> | <printStmt> | <returnStmt> | <block>	

<compType> ::= "frame" | "panel" | "label" | "button" | "textField" | "passwordField" 
<comp> ::= "Comp" "." <compType> "(" <arguments>? ")" <methodCall>? <compBlock>?
<methodCall> ::= <compMethod> ("." <compMethod> )*

<compBlock> ::= "{" ( <declaration> | <compCall> )* "}" ";"
<compMethod> ::= <styleMethod> | <eventMethod> | <bindMethod> | <addMethod> | <layoutMethod>
<layoutMethod> ::= "layout" "(" <layoutType> ("(" <arguments>? ")")? ")"
<styleMethod> ::= "style" "(" ( <objectLiteral> | <IDENTIFIER> ) ")"
<eventMethod> ::= "event" "(" ( <objectLiteral> | <IDENTIFIER> ) ")"
<bindMethod> ::= "bind" "(" <arguments>? ")"
<addMethod> ::= "add" "(" <IDENTIFIER> ")"

<layoutType> ::= "flex" | "grid"

<exprStmt> ::= <expression> ";"
<forStmt> ::= "for" "(" ( <varDecl> | <exprStmt> | ";" )
						<expression>? ";"
                        <expression>? ")" <statement>
<whileStmt> ::= "while" "(" <expression> ")" <statement>
<doWhileStmt> ::= "do" <statement> "while" "(" <expression> ")" ";"
<ifStmt> ::= "if" "(" <expression> ")" <statement> ( "else" <statement> )?
<printStmt> ::= "print" <expression> ";"
<returnStmt> ::= "return" <expression>? ";" 
<block> ::= "{" <declaration>* "}"

<expression> ::= <assignment>
<assignment> ::= <identifier_expr> <assignment_op> <assignment> | <logic_or>
<identifier_expr> ::= ( <call> "." )? <IDENTIFIER>
<assignment_op> ::= "=" | "+=" | "-=" | "*=" | "/="
<logic_or> ::= <logic_and> ( "||" <logic_and> )*
<logic_and> ::= <equality> ( "&&" <equality> )*
<equality> ::= <comparison> (( "!=" | "==" ) <comparison> )*
<comparison> ::= <term> ( ( ">" | ">=" | "<" | "<=" ) <term> )*
<term> ::= <factor> ( ("-" | "+" ) <factor> )*
<factor> ::= <unary> ( ( "/" | "*" | "%" ) <unary> )*

<unary> ::= ( "!" | "-" | "++" | "--" ) <unary> | <postfix>
<postfix> ::= <call> ( "++" | "--" )?
<call> ::= <primary> ( "(" <arguments>? ")" | "." <IDENTIFIER> )*
<primary> ::= "true" | "false" | "null" | <NUMBER> | <STRING> 
			| <IDENTIFIER> | "(" <expression> ")" | "scan" "()"
            
<function> ::= <IDENTIFIER> "(" <parameters>? ")" 
<parameters> ::= <IDENTIFIER> ( "," <IDENTIFIER> )*
<arguments> ::= <expression> ( "," <expression> )*

<objectLiteral> ::= "{" (<property> ("," <property>)*)? "}"
<property> ::= <IDENTIFIER> ":" <propertyValue>
<propertyValue> ::= <unitValue> | <expression>
<unitValue> ::= <PROPERTY_UNIT> | ( ("+" | "-" | "*" | "/" ) <expression> )?

<IDENTIFIER> ::= <ALPHA> ( <ALPHA> | <DIGIT> )*
<PROPERTY_UNIT> ::= <NUMBER> <UNIT>
<STRING> ::= "\"" ( <CHAR_NO_DQ> )* "\""
<NUMBER> ::= <DIGIT>+ ( "." <DIGIT>+ )? 
<CHAR_NO_DQ> ::= <LETTER> | <DIGIT> | <S_CHAR_NO_DQ>
<S_CHAR_NO_DQ> ::= "+" | "-" | "*" | "/" | "%" | "=" | "<" | ">" | "!" | "(" | ")" | "{" | "}" | "[" | "]" | ";" | ":" | "," |
               "." | "'" | "\\" | "|" | "&" | "?" | "@" | "_" | "^" | "~" | "`" | "$" | "#" | " "
<ALPHA> ::= <LETTER> | "_"
<UNIT> ::= "px" | "em" | "percent"
<DIGIT> ::= [0-9]
<LETTER> ::= [a-z] | [A-Z]