<program> ::= <declaration>* "EOF"

<declaration> ::= <mainDecl>
                | <funcDecl>
                | <varDecl>
                | <nativeDecl>
                | <statement>

<mainDecl> ::= "expose" "void" "main" "(" <parameter> ")" <block>
<funcDecl> ::= ("expose")? <returnType> <IDENTIFIER> "(" <parameters>? ")" <block>
<varDecl> ::= ("expose")? <dataType>  <IDENTIFIER> ( "=" <expression> )? ";"
<nativeDecl> ::= ("expose")? <nativeClassType> <IDENTIFIER> ( "->" <expression> )? ";"
<statement> ::= <exprStmt> | <forStmt> | <whileStmt> | <doWhileStmt> | <ifStmt> | <printStmt> | <returnStmt> | <breakStmt> | <block>

<exprStmt> ::= <expression> ";"
<forStmt> ::= "for" "(" ( <varDecl> | <exprStmt> | ";" )
                        <expression>? ";"
                        <expression>? ")" <statement>
<whileStmt> ::= "while" "(" <expression> ")" <statement>
<doWhileStmt> ::= "do" <statement> "while" "(" <expression> ")" ";"
<ifStmt> ::= "if" "(" <expression> ")" <statement> ( "else" <statement> )?
<printStmt> ::= "print" <expression> ";"
<returnStmt> ::= "return" <expression>? ";"
<breakStmt> ::= "break" ";" 
<block> ::= "{" <declaration>* "}"

<expression> ::= <assignment>
<assignment> ::= ( <call> "." )? <IDENTIFIER> <assignment_op> <assignment> | <logic_or>
<assignment_op> ::= "->" | "=" | "+=" | "-=" | "*=" | "/="
<logic_or> ::= <logic_and> ( "||" <logic_and> )*
<logic_and> ::= <equality> ( "&&" <equality> )*
<equality> ::= <comparison> (( "!=" | "==" ) <comparison> )*
<comparison> ::= <term> ( ( ">" | ">=" | "<" | "<=" ) <term> )*
<term> ::= <factor> ( ("-" | "+" ) <factor> )*
<factor> ::= <unary> ( ( "/" | "*" | "%" ) <unary> )*

# <unary> ::= ( "!" | "-" | "++" | "--" ) <unary> | <postfix>
<unary> ::= "!" <unary> | ( "-" | "++" | "--"  ) <postfix> | <postfix>
<postfix> ::= <call> ( "++" | "--" )?
<call> ::= <primary> ( "(" <arguments>? ")" | "." <IDENTIFIER> )*
<primary> ::= "true" | "false" | "null" | <INTEGER> | <DOUBLE> | <CHAR> | <STRING>
            | <IDENTIFIER> | "(" <expression> ")" | "read" "()" | <nativeClass>

<nativeClass> ::= <Comp> | <Style> | <Event>
<Comp> ::= "Comp" "." <compType> "(" <arguments>? ")" <compBlock>?
<Style> ::= "Style" "(" <styleArguments>? ")"
<Event> ::= "Event" "(" <eventArguments>? ")"

<compBlock> ::= "{" ( <declaration> | <compCall> )* "}"
<compCall> ::= <addMethod>

<styleArguments> ::= "{" <STRING> ( "," <STRING> )* "}"
<eventArguments> ::= "{" <eventAction> ( "," <eventAction> )* "}"
<eventAction> ::= <STRING> ":" <block>
<compBlock> ::= "{" ( <declaration> | <compCall> )* "}"
<addMethod> ::= "add" "(" <expression> ")"

<parameters> ::= <parameter> ( "," <parameter> )*
<parameter> ::= <varType> <IDENTIFIER>
<arguments> ::= <expression> ( "," <expression> )*

<returnType> ::= <varType> | "void"
<varType> ::= <dataType> | <nativeClassType>
<dataType> ::= "char" | "string" | "int" | "float" | "double" | "bool"
<nativeClassType> ::= "Comp" | "Style" | "Event"


<IDENTIFIER> ::= <ALPHA> ( <ALPHA> | <DIGIT> )*

<STRING> ::= "\"" ( <CHAR_CONTENT> )* "\""
<CHAR> ::= "'" <CHAR_CONTENT> "'"
<INTEGER> ::= <DIGIT>+
<DOUBLE> ::= <DIGIT>+ "." <DIGIT>+

<CHAR_CONTENT> ::= <REGULAR_CHAR> | <ESCAPE_SEQUENCE>

<REGULAR_CHAR> ::= <LETTER> | <DIGIT> | <SYMBOL>
<SYMBOL> ::= "+" | "-" | "*" | "/" | "%" | "=" | "<" | ">" | "!" | "(" | ")" | "{" | "}" | "[" | "]" | ";" | ":" | "," |
             "." | "@" | "_" | "^" | "~" | "`" | "$" | "#" | " " | "|" | "&" | "?"

<ESCAPE_SEQUENCE> ::= "\\" ( "\"" | "'" | "\\" | "n" | "t" | "r" | "b" | "f" )

<ALPHA> ::= <LETTER> | "_"
<DIGIT> ::= [0-9]
<LETTER> ::= [a-z] | [A-Z]